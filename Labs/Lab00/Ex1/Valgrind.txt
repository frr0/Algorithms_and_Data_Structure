==14991== Memcheck, a memory error detector
==14991== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==14991== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
==14991== Command: ./program f1.txt f2.txt
==14991== Parent PID: 14989
==14991== 
==14991== Use of uninitialised value of size 8
==14991==    at 0x48466FC: strcpy (vg_replace_strmem.c:523)
==14991==    by 0x401397: read_words (util.c:39)
==14991==    by 0x40123E: main (client.c:9)
==14991== 
==14991== Invalid write of size 1
==14991==    at 0x48466FC: strcpy (vg_replace_strmem.c:523)
==14991==    by 0x401397: read_words (util.c:39)
==14991==    by 0x40123E: main (client.c:9)
==14991==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==14991== 
==14991== 
==14991== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==14991==  Access not within mapped region at address 0x0
==14991==    at 0x48466FC: strcpy (vg_replace_strmem.c:523)
==14991==    by 0x401397: read_words (util.c:39)
==14991==    by 0x40123E: main (client.c:9)
==14991==  If you believe this happened as a result of a stack
==14991==  overflow in your program's main thread (unlikely but
==14991==  possible), you can try to increase the size of the
==14991==  main thread stack using the --main-stacksize= flag.
==14991==  The main thread stack size used in this run was 8388608.
==14991== 
==14991== HEAP SUMMARY:
==14991==     in use at exit: 472 bytes in 1 blocks
==14991==   total heap usage: 3 allocs, 2 frees, 5,592 bytes allocated
==14991== 
==14991== 472 bytes in 1 blocks are still reachable in loss record 1 of 1
==14991==    at 0x484086F: malloc (vg_replace_malloc.c:380)
==14991==    by 0x48E0CDE: __fopen_internal (in /usr/lib64/libc-2.33.so)
==14991==    by 0x4012B4: open_file (util.c:15)
==14991==    by 0x4012FF: read_words (util.c:30)
==14991==    by 0x40123E: main (client.c:9)
==14991== 
==14991== LEAK SUMMARY:
==14991==    definitely lost: 0 bytes in 0 blocks
==14991==    indirectly lost: 0 bytes in 0 blocks
==14991==      possibly lost: 0 bytes in 0 blocks
==14991==    still reachable: 472 bytes in 1 blocks
==14991==         suppressed: 0 bytes in 0 blocks
==14991== 
==14991== Use --track-origins=yes to see where uninitialised values come from
==14991== For lists of detected and suppressed errors, rerun with: -s
==14991== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
