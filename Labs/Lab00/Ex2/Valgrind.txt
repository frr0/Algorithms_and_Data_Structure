==10672== Memcheck, a memory error detector
==10672== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10672== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
==10672== Command: ./program fileIn.txt fileArea.txt filePerimeter.txt
==10672== Parent PID: 10670
==10672== 
==10672== Conditional jump or move depends on uninitialised value(s)
==10672==    at 0x484745C: strcmp (vg_replace_strmem.c:863)
==10672==    by 0x40145C: scan_file (client.c:76)
==10672==    by 0x401212: main (client.c:33)
==10672== 
==10672== Conditional jump or move depends on uninitialised value(s)
==10672==    at 0x40145F: scan_file (client.c:76)
==10672==    by 0x401212: main (client.c:33)
==10672== 
==10672== 
==10672== HEAP SUMMARY:
==10672==     in use at exit: 101 bytes in 1 blocks
==10672==   total heap usage: 11 allocs, 10 frees, 19,869 bytes allocated
==10672== 
==10672== 101 bytes in 1 blocks are definitely lost in loss record 1 of 1
==10672==    at 0x484086F: malloc (vg_replace_malloc.c:380)
==10672==    by 0x401F0A: malloc_ck (client.c:276)
==10672==    by 0x401E8A: file_num_of_line_completed (client.c:260)
==10672==    by 0x4012A7: scan_file (client.c:58)
==10672==    by 0x401212: main (client.c:33)
==10672== 
==10672== LEAK SUMMARY:
==10672==    definitely lost: 101 bytes in 1 blocks
==10672==    indirectly lost: 0 bytes in 0 blocks
==10672==      possibly lost: 0 bytes in 0 blocks
==10672==    still reachable: 0 bytes in 0 blocks
==10672==         suppressed: 0 bytes in 0 blocks
==10672== 
==10672== Use --track-origins=yes to see where uninitialised values come from
==10672== For lists of detected and suppressed errors, rerun with: -s
==10672== ERROR SUMMARY: 111 errors from 3 contexts (suppressed: 0 from 0)
